package com.fr.spring.jdbc.main;

import java.util.List;
import java.util.Random;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.fr.spring.jdbc.dao.AdminDao;
import com.fr.spring.jdbc.dao.EmployeeDAO;
import com.fr.spring.jdbc.model.Admin;
import com.fr.spring.jdbc.model.Employee;

public class EmployeeDBOperationsTest {

	public static void main(String[] args) {
		// 1. general database operations
		//generalDbOperations();
		// 2. Using Spring JdbcTemplate
		//jdbcTemplateDbOperations();
		// 3. JdbcDaoSupport
		//jdbcDaoSupport();
		// 4. Named JdbcTemplate
		//namedJdbcTemplateDbOperations();
		
		autoGeneratedKey();
	}

	private static void autoGeneratedKey() {
		
		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("spring-admin-key.xml");
		// Get the EmployeeDAO Bean
		System.out.println("########################## Spring employeeDAOJDBCTemplateDaoSupport way of Inserting dabase object into database ####################");
		AdminDao adminDAO = ctx.getBean("adminDAOImpl",AdminDao.class);
		Admin admin = new Admin();
		admin.setName("Surya-FreeLancing");
		adminDAO.save(admin);
		System.out.println("Admin inserted successfully.....");
	}

	/**
	 * This method is responsible to perform the DB operations using JdbcDaoSupport template class
	 */
	private static void jdbcDaoSupport() {

		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("spring-jdbctemplate-daosupport.xml");
		// Get the EmployeeDAO Bean
		System.out.println("########################## Spring employeeDAOJDBCTemplateDaoSupport way of Inserting dabase object into database ####################");
		EmployeeDAO employeeDAO = ctx.getBean("employeeDAOJDBCTemplateDaoSupport", EmployeeDAO.class);
		// Run some tests for JDBC CRUD operations
		Employee emp = new Employee();
		int rand = new Random().nextInt(1000);
		emp.setId(rand);
		emp.setName("Kiran Kumar");
		emp.setRole("Free Lancer");

		// Create
		employeeDAO.save(emp);
		Employee emp1 = employeeDAO.getById(rand);
		System.out.println("Employee Retrieved::" + emp1);

		/*
		 * // Update emp.setRole("CEO"); employeeDAO.update(emp);
		 */

		// Get All
		List<Employee> empList = employeeDAO.getAll();
		System.out.println(empList);

		// Delete
		//employeeDAO.deleteById(empList.get(0).getId());

		// Close Spring Context
		ctx.close();

		System.out.println("############## DONE ###################");
		
	}

	/**
	 * Database operations using Named JdbcTemplate
	 */
	private static void namedJdbcTemplateDbOperations() {

		
		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("spring-named-jdbctemplate.xml");
		// Get the EmployeeDAO Bean
		System.out.println("########################## Spring Named JdbcTemplate way of Inserting dabase object into database ####################");
		EmployeeDAO employeeDAO = ctx.getBean("namedEmployeeDAOJDBCTemplate", EmployeeDAO.class);
		// Run some tests for JDBC CRUD operations
		Employee emp = new Employee();
		int rand = new Random().nextInt(1000);
		emp.setId(rand);
		emp.setName("Surya123");
		emp.setRole("Java Developer");

		// Create
		employeeDAO.save(emp);
		// Read
		Employee emp1 = employeeDAO.getById(rand);
		System.out.println("Employee Retrieved::" + emp1);

		// Update
		emp.setRole("CEO");
		employeeDAO.update(emp);

		// Get All
		List<Employee> empList = employeeDAO.getAll();
		System.out.println(empList);

		// Delete
		employeeDAO.deleteById(empList.get(0).getId());

		// Close Spring Context
		ctx.close();

		System.out.println("############## DONE ###################");
	}

	/**
	 * Database operations using Spring JdbcTemplate
	 */
	private static void jdbcTemplateDbOperations() {
		
		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("spring-jdbctemplate.xml");
		// Get the EmployeeDAO Bean
		System.out.println("########################## Spring JdbcTemplate way of Inserting dabase object into database ####################");
		EmployeeDAO employeeDAO = ctx.getBean("employeeDAOJDBCTemplate", EmployeeDAO.class);
		// Run some tests for JDBC CRUD operations
		Employee emp = new Employee();
		int rand = new Random().nextInt(1000);
		emp.setId(rand);
		emp.setName("Praveen");
		emp.setRole("Content Developer");

		// Create
		employeeDAO.save(emp);
		// Read
		Employee emp1 = employeeDAO.getById(rand);
		System.out.println("Employee Retrieved::" + emp1);

		// Update
		/*
		 * emp.setRole("CEO"); employeeDAO.update(emp);
		 */

		// Get All
		List<Employee> empList = employeeDAO.getAll();
		System.out.println(empList);

		// Delete
		//employeeDAO.deleteById(rand);

		//findBeanById operation - BeanPropertyRowMapper
		Employee employee = employeeDAO.findByEmployeeId(rand);
		System.out.println("Employee Retrieved::" + employee);
		// Close Spring Context
		ctx.close();

		System.out.println("############## DONE ###################");
		
	}

	/**
	 * General way of performing the database operations
	 */
	private static void generalDbOperations() {
		
		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("spring.xml");

		// Get the EmployeeDAO Bean
		System.out.println(
				"########################## General way of Inserting dabase object into database ####################");
		EmployeeDAO employeeDAO = ctx.getBean("employeeDAO", EmployeeDAO.class);
		// Run some tests for JDBC CRUD operations
		Employee emp = new Employee();
		int rand = new Random().nextInt(1000);
		emp.setId(100);
		emp.setName("Ram Prasad");
		emp.setRole("Security Lead");
		
		//Create
		employeeDAO.save(emp);
		
		//Read
		Employee emp1 = employeeDAO.getById(100);
		System.out.println("Employee Retrieved::"+emp1);
		
		//Update
		emp.setRole("Dev Manager");
		employeeDAO.update(emp);
		
		//Get All
		List<Employee> empList = employeeDAO.getAll();
		System.out.println(empList);
		
		//Delete
		//employeeDAO.deleteById(rand);
		
		//Close Spring Context
		ctx.close();
		
		System.out.println("DONE");
	}

}
